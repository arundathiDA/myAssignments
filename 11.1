Assignment11.1


1. Use the given link and locate the bank marketing dataset. Data Set Link
Perform the below operations:
a.	Create a visual for representing missing values in the dataset.
Solution:
I'm using dataset airquality to create a visual for representing missing values in the dataset
> newair = airquality
> dim(newair)
[1] 153   6
> str(newair)
'data.frame':	153 obs. of  6 variables:
 $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...
 $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...
 $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...
 $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...
 $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...
 $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...
> summary(newair)
     Ozone           Solar.R           Wind             Temp           Month      
 Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00   Min.   :5.000  
 1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00   1st Qu.:6.000  
 Median : 31.50   Median :205.0   Median : 9.700   Median :79.00   Median :7.000  
 Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88   Mean   :6.993  
 3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00   3rd Qu.:8.000  
 Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00   Max.   :9.000  
 NA's   :37       NA's   :7                                                       
      Day      
 Min.   : 1.0  
 1st Qu.: 8.0  
 Median :16.0  
 Mean   :15.8  
 3rd Qu.:23.0  
 Max.   :31.0  
               
> hist(newair$Ozone ,xlab = "ozone", ylab = "frequency",main="histogram of ozone",col="red")
> median(newair$Ozone)
[1] NA
> median(newair$Ozone,na.rm = T)
[1] 31.5
> 
> newair$Ozone[is.na(newair$Ozone)]<- median(newair$Ozone,na.rm = T)
> summary(newair)
     Ozone           Solar.R           Wind             Temp           Month      
 Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00   Min.   :5.000  
 1st Qu.: 21.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00   1st Qu.:6.000  
 Median : 31.50   Median :205.0   Median : 9.700   Median :79.00   Median :7.000  
 Mean   : 39.56   Mean   :185.9   Mean   : 9.958   Mean   :77.88   Mean   :6.993  
 3rd Qu.: 46.00   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00   3rd Qu.:8.000  
 Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00   Max.   :9.000  
                  NA's   :7                                                       
      Day      
 Min.   : 1.0  
 1st Qu.: 8.0  
 Median :16.0  
 Mean   :15.8  
 3rd Qu.:23.0  
 Max.   :31.0  
               
> newair$Ozone
  [1]  41.0  36.0  12.0  18.0  31.5  28.0  23.0  19.0   8.0  31.5   7.0  16.0  11.0  14.0
 [15]  18.0  14.0  34.0   6.0  30.0  11.0   1.0  11.0   4.0  32.0  31.5  31.5  31.5  23.0
 [29]  45.0 115.0  37.0  31.5  31.5  31.5  31.5  31.5  31.5  29.0  31.5  71.0  39.0  31.5
 [43]  31.5  23.0  31.5  31.5  21.0  37.0  20.0  12.0  13.0  31.5  31.5  31.5  31.5  31.5
 [57]  31.5  31.5  31.5  31.5  31.5 135.0  49.0  32.0  31.5  64.0  40.0  77.0  97.0  97.0
 [71]  85.0  31.5  10.0  27.0  31.5   7.0  48.0  35.0  61.0  79.0  63.0  16.0  31.5  31.5
 [85]  80.0 108.0  20.0  52.0  82.0  50.0  64.0  59.0  39.0   9.0  16.0  78.0  35.0  66.0
 [99] 122.0  89.0 110.0  31.5  31.5  44.0  28.0  65.0  31.5  22.0  59.0  23.0  31.0  44.0
[113]  21.0   9.0  31.5  45.0 168.0  73.0  31.5  76.0 118.0  84.0  85.0  96.0  78.0  73.0
[127]  91.0  47.0  32.0  20.0  23.0  21.0  24.0  44.0  21.0  28.0   9.0  13.0  46.0  18.0
[141]  13.0  24.0  16.0  13.0  23.0  36.0   7.0  14.0  30.0  31.5  14.0  18.0  20.0
> 
> hist(newair$Ozone ,xlab = "ozone", ylab = "frequency",main="histogram of ozone",col="red")

> library(mice)
> md.pattern(airquality)
    Wind Temp Month Day Solar.R Ozone   
111    1    1     1   1       1     1  0
35     1    1     1   1       1     0  1
5      1    1     1   1       0     1  1
2      1    1     1   1       0     0  2
       0    0     0   0       7    37 44

Using VIM package

> library(VIM)
> aggr_plot <- aggr(airquality, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(airquality), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#The plot helps us understanding that almost 73% of the samples are not missing any information, 
22% are missing the Ozone value, and the remaining ones show other missing patterns. 
Through this approach the situation looks a bit clearer in my opinion.









b.	Show a distribution of clients based on a Job.
Solution:
#could not use client so using age and job.
> library(ggplot2)
> ggplot(bank.additional, aes(x=job, y=age, fill=job)) + 
+     geom_boxplot(alpha=0.3) +
+     theme(legend.position="none")+
+     ggtitle("Distribution of age based on a Job")



c.	Check whether is there any relation between Job and Marital Status?
Solution:
#we are using Chi-Square Test for checking relation as both job and marital status are categorical variables
#so first defining the null hypothesis
#Ho: There is no relation between job and marital status
#Ha: There is relation between job and marital status
> chisq.test(bank.additional$job ,bank.additional$marital)

#now as we can see p value is nearly 0 or less which is henceforth less than 0.05 
#p value<0.05 hence we will reject the null hypo and accept the alternative hypothesis
#which says that There is relation between job and marital status


#also another way to check relation and more example
#by
#Pearson correlation test
#i'm using variable job and education in this
#also another way to check relation and more example
#by
#Pearson correlation test
#i'm using variable job and education in this
#Correlation test between job and education variables:


newbank = bank.additional
newbank$job <-as.numeric(newbank$job)
newbank$education <-as.numeric(newbank$education)
  
result <- cor.test(newbank$job, newbank$education, method = "pearson")
result


#In the result above :
#t is the t-test statistic value (t = 8.7235),
#df is the degrees of freedom (df= 4117),
#p-value is the significance level of the t-test (p-value nearly 0).
#conf.int is the confidence interval of the correlation coefficient at 95% (conf.int = [0.1046068, 0.1645802]);
#sample estimates is the correlation coefficient (Cor.coeff = 0.1347169).


#The p-value of the test is nearly 0, which is less than the significance level alpha = 0.05. 
#We can conclude that job and education are significantly correlated with a correlation coefficient of 0.1347169 and p-value of 2.210^{-16} 








d.	Check whether is there any association between Job and Education?
Solution:
	#we are using Chi-Square Test for checking association as both job and education are categorical variables
	#hence Chi-Square Test for checking association
	#so first defining the null hypothesis
	#Ho: There is no association between job and education
	#Ha: There is association between job and education
	

	chisq.test(bank.additional$job ,bank.additional$education)
	#now as we can see p value is nearly 0 or less which is henceforth less than 0.05 
	#p value<0.05 hence we will reject the null hypo and accept the alternative hypothesis
	#which says that There is association between job and education

	        ## 'directory' is a character vector of length 1 indicating
	        ## the location of the CSV files
	        
	        ## 'threshold' is a numeric vector of length 1 indicating the
	        ## number of completely observed observations (on all
	        ## variables) required to compute the correlation between
	        ## nitrate and sulfate; the default is 0
	        
	        ## Return a numeric vector of correlations
	corr <- function(directory, threshold = 0) {
	
	
	        for(i in seq_along(id)) {
	                x <- id[i]
	                id_string <- toString(x)
	                if (x >= 1 && x <= 9) {  
	                        monitor <- paste("00", id_string, ".csv", sep="")
	                }
	                else if (x >= 10 && x <= 99) {
	                        id_string <- toString(x)
	                        monitor <- paste("0", id_string, ".csv", sep="")
	                }
	                else {
	                        id_string <- toString(x)
	                        monitor <- paste(id_string, ".csv", sep="") 
	                }
	                filename[i] <- monitor      
	        }
	        #print(filename)
	        
	        #empty vector
	        result <-vector(mode="numeric", length=0)
	        for(i in seq(filename)) {
	                airquality <- read.csv(filename[i])
	                good <- complete.cases(airquality)
	                airquality <- airquality[good, ]
	                if (nrow(airquality) > threshold) {
	                        # We need [[]] around pollutant instead of [] since airquality["sulfate"]
	                        # is a data.frame but we need a vector here. Hence, [[]]. Please note that using either
	                        #[[]] or [] gives the same results as the test cases
	                        correlation <- cor(airquality[["sulfate"]], airquality[["nitrate"]])
	                        result <- append(result, correlation)
	                        #print(correlation)
	                }
	               }
	        result
	}

AIR QUALITY


ollutantmean <- function(directory, pollutant, id = 1:332) {
	        ## 'directory' is a character vector of length 1 indicating
	        ## the location of the CSV files
	        
	        ## 'pollutant' is a character vector of length 1 indicating
	        ## the name of the pollutant for which we will calculate the
	        ## mean; either "sulfate" or "nitrate".
	        
	        ## 'id' is an integer vector indicating the monitor ID numbers
	        ## to be used
	        
	        ## Return the mean of the pollutant across all monitors list
	        ## in the 'id' vector (ignoring NA values)
	        
	        filename <- vector(mode="character", length=length(id))
	        for(i in seq_along(id)) {
	                x <- id[i]
	                id_string <- toString(x)
	                if (x >= 1 && x <= 9) {  
	                        monitor <- paste("00", id_string, ".csv", sep="")
	                }
	                else if (x >= 10 && x <= 99) {
	                        id_string <- toString(x)
	                        monitor <- paste("0", id_string, ".csv", sep="")
	                }
	                else {
	                        id_string <- toString(x)
	                        monitor <- paste(id_string, ".csv", sep="") 
	                }
	                filename[i] <- monitor      
	                #print(monitor)
	        }
	        
	        accumulator <- 0
	        total <- 0  
	        for(i in filename) {
	                airquality <- read.csv(i)
	                good <- complete.cases(airquality[pollutant])
	                #good <- complete.cases(airquality[[pollutant]])
	                airquality <- airquality[good, ]
	                total <- total + nrow(airquality)
	                #accumulator <- accumulator + sum(airquality[pollutant], na.rm = TRUE)
	                # We need [[]] around pollutant instead of [] since airquality[pollutant]
	                # is a data.frame but we need a vector here. Please note that using either
	                #[[]] or [] gives the same results as the test cases but only [[]] successfully
	                #passes the submit() script
	                accumulator <- accumulator + sum(airquality[[pollutant]], na.rm = TRUE)
	        }
	        accumulator/total
	}
